##-----------------------------------
## 1.docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
##        ---- the above command will start the containers in detached mode without rebuilding the images (if they already exists)
##
##
## 2.docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
##     ----this command forces the rebuild of images, even if the images already exists, before starting the container
##
##
##----------------------------------------------
#



version: '3.9'

#define services (containers) that will run as part of the microservices stack.
services:

  product-service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service              #the directory where the dockerfile resides
      dockerfile: ./Dockerfile       #specify the dockerfile for use to build the image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker  #tells spring boot to use the "docker"  profile
    depends_on:
       - mongodb
    networks:
      - spring


  api-gateway:
    image: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring
    depends_on:
      - order-service
      - inventory-service
      - product-service

  mongodb:
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db     #the databse will persist data here on the host machine
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js  #initialzie mongodb with data from this script
    container_name: mongodb
    #restart: unless-stopped
    #command: mongod --auth
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: c_mongo-express
    depends_on:
      - mongodb
    networks:
      - spring


  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring


  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - .keycloak/data/keycloak:/var/lib/postgresql/data
    networks:
      - spring



  #-------Inventory Service-------
  inventory-service:
    image: inventory-service
    ports:
      - "8083:8083"
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    container_name: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  #----------Order Service-----------
  order-service:
    image: order-service
    ports:
      - "8082:8082"
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring


  #------Order Postgres--------
  postgres-order:
    image: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
    volumes:
      - ./data/postgres/order:/data/postgres
      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgres-order
    restart: unless-stopped
    networks:
      - spring



    #------Inventory Postgres---------
  postgres-inventory:
    image: postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/postgres/inventory:/data/postgres
      - ./init/postgres/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgres-inventory
    restart: unless-stopped
    networks:
      - spring



  #----------PgAdmin------------
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    container_name: pgadmin-order
    restart: unless-stopped
    networks:
      - spring


    #optional volumes section persisting data
volumes:
  mongo-db:
   driver: local


networks:
  spring:
    driver: bridge


#  postgres-order:
#    image: postgres
#    ports:
#      - "5433:5432"
#    container_name: postgres-order
#    environment:
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=password
#    volumes:
#      - ./data/postgres/order:/var/lib/postgresql/data
#      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql
#
#
#  postgres-inventory:
#    image: postgres
#    ports:
#      - "5434:5432"
#    container_name: postgres-inventory
#    environment:
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=password
#    restart: unless-stopped
#    volumes:
#      - ./data/postgres/inventory:/var/lib/postgresql/data
#      - ./init/postgres/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
#
#
#
#  pgadmin:
#    image: dpage/pgadmin4
#    ports:
#      - "8088:80"
#    container_name: pgadmin-single
#    environment:
#      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
#      - PGADMIN_DEFAULT_PASSWORD=password
##    depends_on:
##      - postgres-order
##      - postgres-inventory

#  order-service:
#    image: order-service
#    ports:
#      - "8082:8082"
#    build:
#      context: ./order-service              #the directory where the dockerfile resides
#      dockerfile: ./Dockerfile       #specify the dockerfile for use to build the image
#    container_name: order-service
#    environment:
#      SPRING_PROFILES_ACTIVE: docker  #tells spring boot to use the "docker"  profile
#    depends_on:
#      - postgres-order
#    restart: unless-stopped
#    networks:
#      - spring
#
#
#  inventory-service:
#    image: inventory-service
#    ports:
#      - "8083:8083"
#    build:
#      context: ./inventory-service
#      dockerfile: ./Dockerfile
#    container_name: inventory-service
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#    depends_on:
#      - postgres-inventory
#    restart: unless-stopped
#    networks:
#      - spring